/*
一些恶魔抓住了公主(P)并将她关在了地下城的右下角
地下城是由M x N个房间组成的二维网格
我们英勇的骑士(K)最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主
骑士的初始健康点数为一个正整数，如果他的健康点数在某一时刻降至0或以下，他会立即死亡
有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数(房间里的值为负整数，则表示骑士将损失健康点数)
其他房间要么是空的(房间里的值为 0)，要么包含增加骑士健康点数的魔法球(若房间里的值为正整数，则表示骑士将增加健康点数)
为了尽快到达公主，骑士决定每次只向右或向下移动一步。

编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。

例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -> 右 -> 下 -> 下，则骑士的初始健康点数至少为 7。
-2(K)	-3		3
-5		-10		1
10		30		-5(P)

说明:
骑士的健康点数没有上限。
任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。
*/

/*
 * 终点只能从两个方向来到，上方和左方，
	  ↓
	→ x
 * 无法确定到底是上方更优还是左方更优
 * 反过来想
 	* → x 
	↓
	y
 * 我们现在考虑从当前位置，应该是向右走还是向下走，这样我们是可以确定的
 * 如果我们知道右边的位置到终点的需要的最小生命值是 x，下边位置到终点需要的最小生命值是 y，很明显我们应该选择所需生命值较小的方向
 * 如果 x < y，我们就向右走
 * 如果 x > y，我们就向下走
 * 当前位置到终点的最小生命值need就等 x和y中较小的值减去当前位置上边的值
 * 如果算出来need大于 0，那就说明我们需要 need 的生命值到达终点
 * 如果算出来need小于等于 0，那就说明当前位置增加的生命值很大，所以当前位置我们只需要给一个最小值1，就足以走到终点
 */

public class Number174 {
    public int calculateMinimumHP(int[][] dungeon) {
        int row = dungeon.length;
        int col = dungeon[0].length;
        int[][] dp = new int[row + 1][col + 1];
        //终点所需要的值
        dp[row - 1][col - 1] = dungeon[row - 1][col - 1] > 0 ? 1 : -dungeon[row - 1][col - 1] + 1;
        //扩充的边界更新为最大值
        for (int i = 0; i <= col; i++) {
            dp[row][i] = Integer.MAX_VALUE;
        }
        for (int i = 0; i <= row; i++) {
            dp[i][col] = Integer.MAX_VALUE;
        }
        
        //逆过来更新
        for (int i = row - 1; i >= 0; i--) {
            for (int j = col - 1; j >= 0; j--) {
                if (i == row - 1 && j == col - 1) {
                    continue;
                }
                //选择向右走还是向下走
                dp[i][j] = Math.min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j];
                if (dp[i][j] <= 0) {
                    dp[i][j] = 1;
                }
            }
        }
        return dp[0][0];
    }
    
	public static void main(String[] args) {
		int[][] dungeon = {
				{-2, -3, 3},
				{-5, -10, 1},
				{10, 30, -5}
		};
		
		Number174 n = new Number174();
		System.out.println(n.calculateMinimumHP(dungeon));
	}
}
